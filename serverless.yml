service: crud-serverless-users
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  apiGateway:
    apiKeys:
      - crud-serverless-users-api-key # ESTABLECE LA API KEY PARA TODAS LAS RUTAS DE LA API
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:us-east-1:148037648285:table/usersTable
        - Effect: Allow
          Action: 's3:*'
          Resource: arn:aws:s3:::s3-bucket-${self:service}-bucket/*
  environment:
    BUCKET: s3-bucket-${self:service}-bucket
    SECRET_EEG: ${ssm:/SECRET_CRUD_SERVERLESS_FRAMEWOR} # OBTIENE EL VALOR DE UN PARÁMETRO DE SSM

plugins:
  - serverless-dynamodb
  - serverless-offline

package:
  individually: true
  patterns:
    - "!*/**"
    - "!*.zip"
    # EL PATRON COINCIDE CON TODOS LOS ARCHIVOS EN EN LOS DIRECTORIOS DEBEN DE SER IGNORADOS/EXCLUIRSE

custom:
  pythonRequirements:
    dockerizePip: true
  serverless-dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

functions:
  custom-authorizer:
    handler: authorizer/handler.authorize
    package:
      patterns:
        - "authorizer/handler.py"
  get-users:
    handler: get_users/handler.get_users
    package:
      patterns:
        - "get_users/handler.py" # EL PATRON ESTABLECE QUE SOLO SE DEBE DE INCLUIR EL ARCHIVO handler.py
    events:
      - http:
          private: true # ESTABLECE QUE LA RUTA ES PRIVADA
          path: /users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true # EL PARÁMETRO id ES OBLIGATORIO
  create-users:
    handler: create_users/handler.create_users
    package:
      patterns:
        - "create_users/handler.py"
    events:
      - http:
          path: /users
          authorizer:
            name: custom-authorizer # ESTABLECE EL NOMBRE DEL AUTORIZADOR
            resultTtlInSeconds: 15 # ESTABLECE EL TIEMPO DE VIDA DE LA AUTORIZACIÓN EN CACHE segundos
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
              # EL ESQUEMA DEBE DE ESTAR EN LA CARPETA schemas PARA VALIDAR EL BODY
              # https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings-models.html
  update-users:
    handler: update_users/handler.update_users
    package:
      patterns:
        - "update_users/handler.py"
    events:
      - http:
          path: /users/{id}
          method: PUT
          request:
            parameters:
              paths:
                id: true # EL PARÁMETRO id ES OBLIGATORIO
            schemas:
              application/json: ${file(schemas/user-schema.json)}
              # EL ESQUEMA DEBE DE ESTAR EN LA CARPETA schemas PARA VALIDAR EL BODY
  delete-users:
    handler: delete_users/handler.delete_users
    package:
      patterns:
        - "delete_users/handler.py"
    events:
      - http:
          path: /users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true # EL PARÁMETRO id ES OBLIGATORIO
  singed-url:
    handler: singed_url/handler.singed_url
    package:
      patterns:
        - "singed_url/handler.py"
    events:
      - http:
          path: /singedurl
          method: GET
          request:
            parameters:
              querystrings:
                filename: true # EL PARÁMETRO filename ES OBLIGATORIO
  thumbnail-generator:
    handler: thumbnail/handler.thumbnail_generator
    layers:
      - !Ref BaseLambdaLayer
    package:
      patterns:
        - "thumbnail/handler.py"
    events:
      - s3:
          bucket: s3-bucket-${self:service}-bucket
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/

layers:
  base:
    name: "pillow_layer_10_2_0"
    compatibleRuntimes:
      - python3.11
    package:
      artifact: pillow_layer.zip

resources:
  Resources:
    usersTable: # CREACIÓN DE LA TABLA DE DYNAMODB
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST # ESTABLECE QUE LA TABLA SERA Read capacity mode EN ON-DEMAND
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
        BucketName: s3-bucket-${self:service}-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: 'arn:aws:s3:::s3-bucket-${self:service}-bucket/*'
              Principal: '*'
